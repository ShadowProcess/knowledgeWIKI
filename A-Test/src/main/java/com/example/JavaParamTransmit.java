package com.example;


/**
 * ==========================================================
 * |	       |     值传递	         |     引用传递          |
 * ==========================================================
 * |根本区别	   | 会创建副本（copy）	 |   不创建副本           |
 * ==========================================================
 * |所以	       | 方法中无法改变原始对象	 |   方法中可以改变原始对象 |
 *  =========================================================
 *
 *  Java 只有值传递，没有引用传递。引用类型的参数本质还是值传递，只不过它传递的是对象的地址副本，这个副本地址也指向同一个对象。
 *
 * 如果参数类型是基本数据类型，那么传过来的就是这个参数的一个副本，在方法中改变了副本的值不会改变原始的值；
 * 如果参数类型是引用类型，那么传过来的就是这个引用参数地址的副本，这个副本存放的是对象的地址。如果在方法中没有改变这个副本的地址，
 * 而只是改变地址指向的对象中的内容，那么在方法内的改变会影响到传入的参数；
 * 如果在方法中改变了副本的地址，如 new 一个，那么副本就指向了一个新的地址，此时传入的参数还是指向原来的地址，所以不会改变参数的值。
 *
 * 另外注意 String、Byte、Short、Integer、Long、Float、Double、Boolean、Char 的参数传递，在 pass 方法中的修改不会改变原值。
 */

public class JavaParamTransmit {

    public static void main(String[] args) {
        JavaParamTransmit spt = new JavaParamTransmit();
        String name = "Hollis";
        System.out.println("Before pass, name is " + name);
        spt.pass(name);
        System.out.println("After pass, name is " + name);
        /**
         * Before pass, name is Hollis
         * After pass, name is Hollis
         */
    }

    public void pass(String name) {
        name = "hollischuang";
    }
}


/**
 * 我：Java和C++不同，C++中有引用传递的函数调用方式，而Java中只有值传递。
 *
 * 首先，值传递的官方解释是：
 *
 * 【【【值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。】】】
 *
 * 其次，引用传递的官方解释是：
 *
 * 【【【引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。】】】
 *
 * 一句话概括值传递和引用传递的区别：
 *
 * 【【【值传递是传递实参副本，函数修改不会影响实参；引用传递是传递实参地址，函数修改会影响实参。】】】
 *
 */

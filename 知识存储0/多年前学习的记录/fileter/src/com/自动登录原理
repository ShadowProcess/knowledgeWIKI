

1.首先要有自动登录功能
2.完成自动登录原理：
    1.登录成功后判断是否勾选了自动登录
    2.如果勾选了自动登录，将用户名与密码存储到cookie中
    3.做一个Filter，它拦截所有请求，当访问资源时，我们从cookie中获取用户名与密码，进行登录操作


   在Filter中完成工作

   1.得到请求参数
   2.完成登陆操作
   3.登录成功，将用户存储到Session中
   4.将用户名与密码存储到Cookie中

   代码实现：
        先完成登陆操作



http://localhost/day21_2/demo4/login.jsp
String uri = request.getRequestURI();   //--> /day21_2/demo4/login.jsp
String contextPath = request.getContextPath(); //-->  /day21_2

String path = uri.substring(contextPath.length);  //-->   /demo4/login.jsp



主要对URL路径的判断进行优化
1.在src下创建两个配置文件  user.properties admin.properties
   在这两个配置文件中分别保存不同的角色具有的权限路径
   例如：admin.properties中 url=/book_add,/book_delete,/book_update,/book_search

2.在PrivilegeFilter中完成权限控制


    把用户对应的权限存储到配置文件中，进行处理
        例如： admin.properties[中] url=/book_add,/book_delete,/book_update,/book_search
              user.properties[中]  url= /book_ss,/book_ff



    1.在init方法中将配置文件的信息读取出来，并分别保存到users，admin两个List<String>集合中

        ResourceBundle.getBundle(String baseName);
        admin.properties文件的基名就是admin
        user.properties文件的基名就是user

        bundle.getString("url");这就是配置文件中的名叫url的值

    2.在判断时就比较方便
        1.判断资源路径是否需要权限控制
            List<String> admins = []
            List<String> users = []

            从配置文件取出配置的对应权限
            if(admins.equals("/book_add") || users.equals("/book_update")) {
            }



spring:
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.alibaba.durid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dbgirl?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
        username: root
        password: 123456
      ds1:
        type: com.alibaba.durid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/dbgirl1?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
        username: root
        password: 123456
      shadring:
        tables:
          girl:
            actualDataNodes: ds$->(0..1).gril
            databaseStrategy:
              inline:
                shardingColumn: id
                algorithmExpression: ds$->{id % 2}
            keyGenerator:
              type: SNOWFLAKE
                column: id
      props:
        sql.show: true

    #如果需要配置从库，直接在datasource后面继续加就行，
    #默认会使用master数据源，需要使用其他数据源时在service类或方法上加上@DS("数据源名称")注解就行。
    dynamic:
      datasource:
        master:
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://localhost:3306/dbgirl?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
          username: root
          password: 123456

logging:
  level:
    com.atmoon.sharding.mapper: info

#
#  这里主要解释下actualDataNodes以及algorithmExpression:
#  这两个属性都用到了行表达式，常见用法包括
#  $->{begin..end}表示范围区间
#  $->{[unit1, unit2, unit_x]}表示枚举值
#  更多用法可以参考行表达式
#
#  actualDataNodes对应实际数据库以及表的集合，表示可以到ds0、ds1这两个库找到girl表。
#  algorithmExpression表示分片规则，这里是根据id的奇偶性判断。
#  ――――――――――――――――
